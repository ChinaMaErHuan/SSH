<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:util="http://www.springframework.org/schema/util"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd">
	<description>Spring配置文件</description>
	<!-- @Compoment这类型注解的类都是需要被扫描 说白就是：让Spring的ApplicationContext去加载和初始化所有加了注解的类，给实例化 
		@Repository:数据层的dao @Service:service就是service @Controller:web比如：action和springmvc-controller类 -->
	<!-- 扫包 -->
	<context:component-scan base-package="com.tz.dao"></context:component-scan>
	<context:component-scan base-package="com.tz.service"></context:component-scan>
	<context:component-scan base-package="com.tz.web"></context:component-scan>
	<context:component-scan base-package="com.tz.core.interceptor"></context:component-scan>
	<context:component-scan base-package="com.tz.core.log"></context:component-scan>
	<context:property-placeholder location="classpath:db.properties"
		file-encoding="UTF-8" />
	<!-- c3p0 -->
	<!--destroy-method="close"的作用是当数据库连接不使用的时候,就把该连接重新放到数据池中,方便下次使用调用. -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<!-- jdbc驱动名称 -->
		<property name="driverClass" value="${jdbc.driver}"></property>
		<!-- 数据库链接 -->
		<property name="jdbcUrl" value="${jdbc.url}"></property>
		<property name="user" value="${jdbc.username}"></property>
		<property name="password" value="${jdbc.password}"></property>
		<!-- 指定连接池中保留的最大连接数. Default:15 -->
		<property name="maxPoolSize" value="${jdbc.maxPoolSize}" />
		<!-- 指定连接池中保留的最小连接数 -->
		<property name="minPoolSize" value="${jdbc.minPoolSize}" />
		<!-- 指定连接池的初始化连接数 取值应在minPoolSize 与 maxPoolSize 之间.Default:3 -->
		<property name="initialPoolSize" value="${jdbc.initialPoolSize}" />
		<!-- 最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。 Default:0 -->
		<property name="maxIdleTime" value="${jdbc.maxIdleTime}" />
		<!-- 当连接池中的连接耗尽的时候c3p0一次同时获取的连接数. Default:3 -->
		<property name="acquireIncrement" value="${jdbc.acquireIncrement}" />
		<!-- JDBC的标准,用以控制数据源内加载的PreparedStatements数量。 但由于预缓存的statements属于单个connection而不是整个连接池所以设置这个参数需要考虑到多方面的因数.如果maxStatements与maxStatementsPerConnection均为0,则缓存被关闭。Default:0 -->
		<property name="maxStatements" value="${jdbc.maxStatements}" />
		<!-- 每60秒检查所有连接池中的空闲连接.Default:0 -->
		<property name="idleConnectionTestPeriod" value="${jdbc.idleConnectionTestPeriod}" />
	</bean>

	<!-- 配置Hibernate -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<!-- 获取数据源 -->
		<property name="dataSource" ref="dataSource"></property>
		<property name="namingStrategy">
			<bean class="org.hibernate.cfg.ImprovedNamingStrategy" />
		</property>
		<!-- 获取实体目录 -->
		<property name="packagesToScan" value="com.tz.model"></property>
		<property name="hibernateProperties">
			<props>
				<!-- 数据库的断言 -->
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
				<!-- 显示sql -->
				<prop key="hibernate.show_sql">true</prop>
				<!-- 格式化sql -->
				<prop key="hibernate.format_sql">true</prop>
				<!-- 自动映射表 -->
				<prop key="hibernate.hbm2ddl.auto">update</prop>
			</props>
		</property>
	</bean>

	<!-- 事务管理 -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	<!-- 事务管理 -->
	<tx:annotation-driven transaction-manager="transactionManager"/>
	<!-- 加载注解的事务 -->
<!-- 	<tx:advice id="txAdvice" transaction-manager="transactionManager"> -->
<!-- 		<tx:attributes> -->
<!-- 			<tx:method name="save*" read-only="false" propagation="REQUIRED" /> -->
<!-- 			<tx:method name="update*" read-only="false" propagation="REQUIRED" /> -->
<!-- 			<tx:method name="delete*" read-only="false" propagation="REQUIRED" /> -->
<!-- 			<tx:method name="remove*" read-only="false" propagation="REQUIRED" /> -->
			
<!-- 			<tx:method name="find*" read-only="true" propagation="SUPPORTS" /> -->
<!-- 			<tx:method name="get*" read-only="true" propagation="SUPPORTS" /> -->
<!-- 			<tx:method name="load*" read-only="true" propagation="SUPPORTS" /> -->
<!-- 			<tx:method name="list*" read-only="true" propagation="SUPPORTS" /> -->
<!-- 			<tx:method name="count*" read-only="true" propagation="SUPPORTS" /> -->
<!-- 			<tx:method name="search*" read-only="true" propagation="SUPPORTS" /> -->
<!-- 			<tx:method name="*" read-only="true" propagation="SUPPORTS" /> -->
<!-- 		</tx:attributes> -->
<!-- 	</tx:advice> -->
<!-- 	<aop:config> -->
<!-- 		<aop:pointcut id="interceptorPointCuts" expression="execution (* com.tz.service..*.*(..))" /> -->
<!-- 		<aop:advisor pointcut-ref="interceptorPointCuts" advice-ref="txAdvice" /> -->
<!-- 	</aop:config> -->

		
	<!-- 开始aop注解模式 -->
	<!-- 第一种方式  配合@Aspectj 注解使用-->
	<!-- <aop:aspectj-autoproxy proxy-target-class="false"></aop:aspectj-autoproxy> -->
	<!-- 第二种方式 -->
	<aop:config>
		<aop:pointcut expression="execution(* com.tz.service.*.impl.*.*(..))" 
 			id="logpointCut" /> 
 		<aop:aspect ref="tmLogAopInterceptor2"> 
			<!--<aop:around method="log" pointcut="execution(* com.tz.service.*.impl.*.*(..))"/> -->
 			<aop:around method="log" pointcut-ref="logpointCut" /> 
 		</aop:aspect> 
 	</aop:config> 
</beans>
